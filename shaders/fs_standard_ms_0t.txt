#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;

struct Light {
    vec3 position;
    vec3 direction;//nullable
    float cutOff;//nullable
    float outerCutOff;//nullable
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
    float constant;
    float linear;
    float quadratic;

    float onOff;
};

#define MAX_POINT_LIGHTS 10
uniform Light lights[MAX_POINT_LIGHTS];
uniform int numLights;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 

uniform Material material;

vec3 CalcPointLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
  // ambient
  vec3 ambient = light.ambient * material.ambient;

  // diffuse
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse);

  // specular 
  vec3 reflectDir = reflect(-lightDir, norm);  
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);
 
  vec3 result = ambient + diffuse + specular;
  return result;
}
vec3 CalcSpotLight(Light light, vec3 norm, vec3 aPos, vec3 viewDir) {
    vec3 lightDir = normalize(light.position - aPos);
    // check if lighting is inside the spotlight cone
    float theta = dot(lightDir, normalize(-light.direction)); 
        if (theta > light.cutOff) { // remember that we're working with angles as cosines instead of degrees so a '>' is used.  
        // ambient
        vec3 ambient = light.ambient * material.ambient;
        
        // diffuse 
        vec3 norm = normalize(aNormal);
        float diff = max(dot(norm, lightDir), 0.0);
        vec3 diffuse = light.diffuse * (diff * material.diffuse);  
        
        // specular
        vec3 viewDir = normalize(viewPos - aPos);
        vec3 reflectDir = reflect(-lightDir, norm);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
        vec3 specular = light.specular * (spec * material.specular);

        // spotlight (soft edges)
        float theta = dot(lightDir, normalize(-light.direction)); 
        float epsilon = (light.cutOff - light.outerCutOff);
        float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
        diffuse  *= intensity;
        specular *= intensity;
        
        // attenuation
        float distance    = length(light.position - aPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    

        // ambient  *= attenuation; // remove attenuation from ambient, as otherwise at large distances the light would be darker inside than outside the spotlight due the ambient term in the else branch
        //diffuse   *= attenuation;
        //specular *= attenuation;   
           
        vec3 result = ambient + diffuse + specular;
        return result;
    } else {
        // else, use ambient light so scene isn't completely dark outside the spotlight.
        return light.ambient * material.ambient;
    }
}
void main() {
    vec3 norm = normalize(aNormal);
    vec3 viewDir = normalize(viewPos - aPos);

    vec3 result = vec3(0.0);
    for(int i = 0; i < numLights; i++) {
        if (lights[i].onOff > 0) {
            if (lights[i].constant < 0) {
                //pointlight
                result += CalcPointLight(lights[i], norm, aPos, viewDir); 
            } else {
                //spotlight
                result += CalcSpotLight(lights[i], norm, aPos, viewDir);
            }
        }
    }
    fragColor = vec4(result, 1.0);
} 